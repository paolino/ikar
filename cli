#!/usr/bin/env ruby
require "cardano_wallet"
require "docopt"
doc = <<DOCOPT
Wallet test aid

Usage:
  #{__FILE__} byron2byron --port=<port>  --max-addresses=<addr> --max-amt=<amt> <wid1> <wid2>
  #{__FILE__} shelley2shelley --port=<port> --max-addresses=<addr> --max-amt=<amt> <wid1> <wid2>
  #{__FILE__} shelley2byron --port=<port> --max-addresses=<addr> --max-amt=<amt> <shelley_wid> <byron_wid>
  #{__FILE__} shelley2byron2icarus --port=<port> --max-addresses=<addr> --max-amt=<amt> <shelley1_wid> <shelley2_wid> <byron_wid> <icarus_wid>
  #{__FILE__} gen-byron-addresses --port=<port> --max-addresses=<addr> <byron_wid>

Args:
  byron2byron            Run txs back and forth between 2 Byron wallets <wid1> <wid2>
  shelley2shelley        Run txs back and forth between 2 Shelley wallets <wid1> <wid2>
  shelley2byron          Run txs back and forth between 2 wallets <shelley_wid> <byron_wid>
  shelley2byron2icarus   Run txs back and forth between 4 wallets <shelley1_wid> <shelley2_wid> <byron_wid> <icarus_wid>

Options:
  -h --help             Show this screen.
  --port=NUM            Wallet port [default: 8090]
  --max-addresses=NUM   Max number addresses to which tADA is sent in 1 transaction [default: 50]
  --max-amt=NUM         Max amount of tADA that is sent to 1 address [default: 100]

DOCOPT

##
# Generate n Byron addresses for wallet wid
def gen_byron_addrs(wid, passphrase, n, details: true)
  addresses = []
  puts "Generating #{n} Byron addresses..."
  1.upto n do |i|
    puts "Generating #{i} address..." if details
    addresses << @byron.addresses.create(wid, {passphrase: passphrase})['id']
  end
  addresses
end

##
# Generate amt of lovelace to send (between 1..1k ADA in lovelace)
def gen_amt(max=100)
  # max = [10, 100].sample
  amt_ada = [*1..max].sample
  rndm = 1 + ([*1..1000000].sample.to_f / 1000000)
  amt = amt_ada * 1000000 * rndm
  amt.to_i
end

##
# send multi address tx from byron wallet to addresses
def send_byron(wsrc, passphrase, addresses, max_amt)
  addr_amt = addresses.collect { |v| {v => gen_amt(max_amt) } }
  r = @byron.transactions.create(wsrc, passphrase, addr_amt)
  puts r
  puts "-----"
  r
end

##
# get sequential wallet addresses
def get_sequential_addresses(wallet, wid, n, filter = nil)
  addresses = wallet.addresses.list(wid)
  if filter
    addresses.select {|a| a['state'] == filter }.map {|a| a['id']}[0..(n-1)]
  else
    addresses.map {|a| a['id']}[0..(n-1)]
  end
end

##
# get n icarus wallet addresses
def get_icarus_addresses(wid, n, filter = nil)
  get_sequential_addresses(@byron, wid, n, filter)
end

##
# get n shelley wallet addresses
def get_shelley_addresses(wid, n, filter = nil)
  get_sequential_addresses(@shelley, wid, n, filter)
end

##
# send multi address tx from byron shelley to addresses
def send_shelley(wsrc, passphrase, addresses, max_amt)
  addr_amt = addresses.collect { |v| {v => gen_amt(max_amt) } }
  r = @shelley.transactions.create(wsrc, passphrase, addr_amt)
  puts addr_amt
  puts r
  puts "-----"
  r
end

def append_failure(filename, r, utxo)
  uri = r.request.last_uri
  body = r.request.options[:body]
  method = r.request.http_method.to_s.split('::').last.upcase
  open(filename, 'a') { |f|
    f.puts "FAILURE!!!"
    f.puts "Time: #{Time.now.strftime("%d/%m/%Y %H:%M:%S")}"
    f.puts "---------------"
    f.puts "UTxO: #{utxo}"
    f.puts ""
    f.puts "REQUEST: "
    f.puts "#{method} #{uri}"
    f.puts "payload: #{body}"
    f.puts ""
    f.puts "RESPONSE:"
    f.puts "#{r}"
    f.puts "==============="
  }
end


begin
  args = Docopt::docopt(doc)
  # pp args

  @cw = CardanoWallet.new({ port: args['--port'].to_i, timeout: 3600 })
  @byron = @cw.byron
  @shelley = @cw.shelley


  ##
  # Generate addresses on byron wallet
  if args['gen-byron-addresses']
    byron_wid = args['<byron_wid>']
    addresses_amt = args['--max-addresses'].to_i
    passphrase = "Secure Passphrase"

    addresses_byron = gen_byron_addrs(byron_wid, passphrase, addresses_amt, details: true)
  end

  ##
  # Send transactions between 2 shelley, 1 byron and 1 icarus
  # All transactions are multi-address including mostly addresses
  # for shelley/byron/icarus
  if args['shelley2byron2icarus']
    shelley1_wid = args['<shelley1_wid>']
    shelley2_wid = args['<shelley2_wid>']
    byron_wid = args['<byron_wid>']
    icarus_wid = args['<icarus_wid>']
    addresses_amt = args['--max-addresses'].to_i
    max_amt = args['--max-amt'].to_i

    while 1 do
      passphrase = "Secure Passphrase"

      puts "===== TXs from shelley1_wid: #{shelley1_wid} ====="
      addresses_shelley = get_shelley_addresses(shelley2_wid, [*1..addresses_amt].sample)
      addresses_byron = gen_byron_addrs(byron_wid, passphrase, [*1..addresses_amt].sample)
      addresses_icarus = get_icarus_addresses(icarus_wid, [*1..addresses_amt].sample)
      addresses = addresses_shelley + addresses_byron + addresses_icarus
      r = send_shelley(shelley1_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo_shelley1 = @shelley.wallets.utxo(shelley1_wid)
        append_failure("shelley2byron2icarus_failures_from_shelley1_wid.txt",
                      r,
                      utxo_shelley1)
      end
      sleep 1
      puts "===== TXs from shelley2_wid: #{shelley2_wid} ====="
      addresses_shelley = get_shelley_addresses(shelley1_wid, [*1..addresses_amt].sample)
      addresses_byron = gen_byron_addrs(byron_wid, passphrase, [*1..addresses_amt].sample)
      addresses_icarus = get_icarus_addresses(icarus_wid, [*1..addresses_amt].sample)
      addresses = addresses_shelley + addresses_byron + addresses_icarus
      r = send_shelley(shelley2_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo_shelley2 = @shelley.wallets.utxo(shelley2_wid)
        append_failure("shelley2byron2icarus_failures_from_shelley2_wid.txt",
                      r,
                      utxo_shelley2)
      end
      sleep 1
      puts "===== TXs from byron: #{byron_wid} ====="
      addresses_shelley = get_shelley_addresses(shelley1_wid, [*1..addresses_amt].sample)
      addresses_icarus = get_icarus_addresses(icarus_wid, [*1..addresses_amt].sample)
      addresses = addresses_shelley + addresses_icarus

      r = send_byron(byron_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo_byron = @byron.wallets.utxo(byron_wid)
        append_failure("shelley2byron2icarus_failures_from_byron_wid.txt", r, utxo_byron)
      end
      sleep 1
      puts "===== TXs from icarus: #{icarus_wid} ====="
      addresses_shelley = get_shelley_addresses(shelley2_wid, [*1..addresses_amt].sample)
      addresses_byron = gen_byron_addrs(byron_wid, passphrase, [*1..addresses_amt].sample)

      addresses = addresses_shelley + addresses_byron

      r = send_byron(icarus_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo_icarus= @byron.wallets.utxo(icarus_wid)
        append_failure("shelley2byron2icarus_failures_from_icarus_wid.txt", r, utxo_icarus)
      end
    end
  end

  ##
  # Send transactions between two byron wallets
  if args['byron2byron']
    wid1 = args['<wid1>']
    wid2 = args['<wid2>']
    addresses_amt = args['--max-addresses'].to_i
    max_amt = args['--max-amt'].to_i

    while 1 do
      passphrase = "Secure Passphrase"
      addresses = gen_byron_addrs(wid2, passphrase, [*1..addresses_amt].sample)
      5.times{ send_byron(wid1, passphrase, addresses, max_amt) }
      # sleep 2
      addresses = gen_byron_addrs(wid1, passphrase, [*1..addresses_amt].sample)
      5.times{ send_byron(wid2, passphrase, addresses, max_amt) }
    end
  end

  ##
  # Send transactions between two shelley wallets
  if args['shelley2shelley']
    wid1 = args['<wid1>']
    wid2 = args['<wid2>']
    addresses_amt = args['--max-addresses'].to_i
    max_amt = args['--max-amt'].to_i

    while 1 do
      passphrase = "Secure Passphrase"

      puts "===== TXs from #{wid1} ====="
      addresses = get_shelley_addresses(wid2, [*1..addresses_amt].sample)
      r = send_shelley(wid1, passphrase, addresses, max_amt)
      if r.code == 500
        utxo1 = @shelley.wallets.utxo(wid1)
        append_failure("shelley2shelley_failures_from_wid1.txt", r, utxo1)
      end

      sleep 1

      puts "===== TXs from #{wid2} ====="
      addresses = get_shelley_addresses(wid1, [*1..addresses_amt].sample)
      r = send_shelley(wid2, passphrase, addresses, max_amt)
      if r.code == 500
        utxo2 = @shelley.wallets.utxo(wid2)
        append_failure("shelley2shelley_failures_from_wid2.txt", r, utxo2)
      end
    end
  end

  ##
  # Send transactions between shelley and byron wallets
  if args['shelley2byron']
    shelley_wid = args['<shelley_wid>']
    byron_wid = args['<byron_wid>']
    addresses_amt = args['--max-addresses'].to_i
    max_amt = args['--max-amt'].to_i

    while 1 do
      passphrase = "Secure Passphrase"

      puts "===== TXs from shelley: #{shelley_wid} ====="
      addresses = gen_byron_addrs(byron_wid, passphrase, [*1..addresses_amt].sample)
      r = send_shelley(shelley_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo1 = @shelley.wallets.utxo(shelley_wid)
        append_failure("shelley2byron_failures_from_shelley.txt", r, utxo1)
      end

      sleep 1

      puts "===== TXs from byron #{byron_wid} ====="
      addresses = get_shelley_addresses(shelley_wid, [*1..addresses_amt].sample)
      r = send_byron(byron_wid, passphrase, addresses, max_amt)
      if r.code == 500
        utxo2 = @byron.wallets.utxo(byron_wid)
        append_failure("shelley2byron_failures_from_byron.txt", r, utxo2)
      end
    end
  end

rescue Docopt::Exit => e
  puts e.message
end
